- admin = current_user.is_role? "admin"
- moderator = current_user.is_role? "moderator"

:css
	body {
		/ background: white !important; 
		background-image: url(/assets/bg_images/twi/tree.jpg) !important;
		/ background-size:cover;
	}

#manager{:class => (admin ? 'feeds_manage' : 'moderations_manage')}
	#feed_container.span10
		#wrapper.span9
			#feed.row
				#left_column.span3.hidden-phone
					- if admin
						%ul.nav.nav-tabs.nav-stacked
							%li
								.box.top Inbox
							%li{:class => "#{'active' if params[:filter].nil?}"}= link_to "Moderated (#{@moderated_box_count})", '?'
							%li{:class => "#{'active' if params[:filter] == 'email'}"}= link_to "Email (#{@email_count})", '?filter=email'
							%li{:class => "#{'active' if params[:filter] == 'linked'}"}= link_to "Linked Posts (#{@linked_box_count})", '?filter=linked'
							%li{:class => "#{'active' if params[:filter] == 'unlinked'}"}= link_to "Unlinked Posts (#{@unlinked_box_count})", '?filter=unlinked'

							%li
								.box Quality control
								%li{:class => "#{'active' if params[:filter] == 'autocorrected'}"}= link_to "Autocorrected (#{@autocorrected_box_count})", '?filter=autocorrected'
								%li{:class => "#{'active' if params[:filter] == 'spam'}"}= link_to "Spam", '?filter=spam'

							%li
								.box Tags
							%li{:class => "#{'active' if params[:filter] == 'ugc'}"}= link_to "User Generated Questions", '?filter=ugc'
							%li{:class => "#{'active' if params[:filter] == 'retweets'}"}= link_to "Retweets", '?filter=retweets'
							%li{:class => "#{'active' if params[:filter] == 'spam'}"}= link_to "Spam", '?filter=spam'
							%li{:class => "#{'active' if params[:filter] == 'content'}"}= link_to "Content Suggestions", '?filter=content'
							%li{:class => "#{'active' if params[:filter] == 'friend'}"}= link_to "Ask a Friend", '?filter=friend'
							- if @oneinbox
								%li{:class => "#{'active' if params[:filter] == 'tutor'}"}= link_to "Tutor", '?filter=tutor'

						%ul.nav.nav-tabs.nav-stacked.stats
							%li
								.box.top Manual vs App vs Auto vs Manual grade
							%li
								#autograder-auto-stats.graph

						%ul.nav.nav-tabs.nav-stacked.stats
							%li
								.box.top Correct vs Incorrect grade
							%li
								#autograder-correct-stats.graph
					- else
						%ul.nav.nav-tabs.nav-stacked
							%li
								.box.top What is this?
							%li
								.guidelines 
									%div Dear Superuser
									%p
										You're one of the most active learners asking/answering questions through our handles. Thank you!
									%div Please Help Us Grade
									%p
										We receive over 1,000 question responses per day -- that's a lot for us to keep up with! Can you give us a hand grading some?
									%div Guidelines
									%p
										For each response:
										%ul 
											%li 
												Click 
												%span{style: 'font-weight: bold;'} Correct/Incorrect/Tell 
												answer for each response. 
											%li 
												Click 
												%span{style: 'font-weight: bold;'} Ignore this
												if the post doesn't need a response.
											%li 
												Click
												%span{style: 'font-weight: bold;'} Not sure
												If you aren't sure what to do with it.

										Click "Moderate" in the header whenever you want to grade more!

				#right_column.span6
					#posts.rounded
						.header.border-color
							%h3= admin ? @asker.twi_screen_name : "Grade responses"
							
						- asker_collection = User.askers.collect {|a| [a.id, a.twi_screen_name]}
						- unresponded_unlinked_count = unresponded_linked_count = autocorrect_count = 0
						- @engagements.each do |id, post|

							/ quick reply vars
							- correct = nil
							- if params[:filter] != 'ugc' and question = post.in_reply_to_question
								- correct = question.answers.reject{|a| a.correct != true}[0]

							.conversation.border-color{class: ('dim' if params[:filter] == 'tutor' and Asker.ids.include?(post.user_id))}
								.post.parent.answered{:post_id => post.id, :interaction_type => post.interaction_type}
									%p.time= time_formatter(post.created_at)
									%i.icon-share-alt{:style => "display: none;"}
									- if ['ugc', 'content', 'friend'].include? params[:filter] and Asker.ids.include? @conversations[id][:posts].select{|p| p.intention.blank?}.first.in_reply_to_user_id
										%i.icon-comment{:style => "color: #4d90f0;"}
									.content
										= image_tag(post.user.twi_profile_img_url, :class => "rounded")
										%i{:class => interaction_icon(post.interaction_type)}
										- if post.moderator_id
											%i.icon-user
										%h5
											%span= post.user.twi_screen_name	
										- if @oneinbox
											â†’ #{@askers_by_id[post.in_reply_to_user_id]}
										- show_answer = true if admin == true
										- show_answer ||= ("answer" == ab_test("show moderator q & a or answer (-> accepted grade)", "answer", "q & a"))
										- unless show_answer
											.question
												%i 
													Q. #{question.text}
													%br
													A. #{correct.text}

										%p= post.text.gsub(/<|>/, '').gsub(/@[a-zA-Z0-9_]+ /, '').html_safe

										- if show_answer
											- if correct
												%p
													%span{style: 'opacity:0.6;'}
														Correct: 
														= correct.text

									- if params[:filter] == 'ugc'
										= render :partial => "ugc_actions", :locals => {:post => post}
									- elsif admin
										/ = render :partial => "default_actions", :locals => {:post => post, :question => question, :admin => admin}

										- if post.moderations.select{|m|m.type_id==post.moderations.first.type_id}.count > 1
											- correct = incorrect = tell = hide = ''
											- case post.moderations.first.type_id
											- when 1
												- correct = 'btn-success'
											- when 2
												- incorrect = 'btn-danger'
											- when 3
												- tell = 'btn-info'
											- when 5
												- hide = 'btn-warning'

										.actions
											.container
												.main
													.btn-group.linked
														- if question
															%a.btn.quick-reply-yes{:class => "#{'btn-success' if post.autocorrect} #{correct}"}= "<u>y</u>es".html_safe
															%a.btn.quick-reply-no{:class => "#{'btn-warning' if post.autocorrect == false} #{incorrect}"}= "<u>n</u>o".html_safe
															%a.btn.quick-reply-tell{:class => tell}= "<u>t</u>ell".html_safe
															%a.btn= best_in_place post, :spam, :type => :checkbox, :classes => "btn-flag", :collection => ["<u>f</u>lag".html_safe, "un<u>f</u>lag".html_safe], :data => {:spam => post.spam}
															%a.btn{:class => hide}= best_in_place post, :requires_action, :type => :checkbox, :classes => "btn-hide", :collection => ["s<u>h</u>ow".html_safe, "<u>h</u>ide".html_safe], :data => {:requires_action => post.requires_action}
														- else
															%a.btn= best_in_place post, :spam, :type => :checkbox, :classes => "btn-flag", :collection => ["<u>f</u>lag".html_safe, "un<u>f</u>lag".html_safe], :data => {:spam => post.spam}
															%a.btn= best_in_place post, :requires_action, :type => :checkbox, :classes => "btn-hide", :collection => ["s<u>h</u>ow".html_safe, "<u>h</u>ide".html_safe], :data => {:requires_action => post.requires_action}

														%a.btn.retweet= "<u>r</u>etweet".html_safe
														.dropdown.btn
															%span.dropdown-toggle.feedback{"data-toggle" => "dropdown", :href => "#"}= "<u>s</u>cript".html_safe
															%ul.dropdown-menu{:role => "menu", "aria-labelledby" => "dLabel"}
																- SCRIPTS.each do |name, text|
																	%li
																		%a.script{script_name: name, script_text: text}= name.to_s.humanize
																- if post.is_dm? and admin
																	%li.divider
																	- @nudge_types.each do |nudge_type|
																		%li
																			%a.nudge{nudge_id: nudge_type.id}= nudge_type.text.to_s.humanize
																
													.btn-group
														%a.btn.open= "<u>o</u>pen".html_safe
														/ %a.btn.create-exam= "<u>e</u>xam".html_safe
														%a.btn.add-email= "<u>e</u>mail".html_safe

														%a.btn.dropdown-toggle.feedback{"data-toggle" => "dropdown", :href => "#"} tag
														%ul.dropdown-menu{:role => "menu", "aria-labelledby" => "dLabel"}
															%li
																- tags = post.tags.collect(&:name)
																- @tags.each do |tag|
																	%a.tag_post{:tag_name => tag.name, :style => ("font-weight: bold;" if tags.include?(tag.name))}= tag.name

												.sub.new-email
													.ios-arrow-left.back{title: "Back"}
													.form-inline
														= form_for(post.user, remote: true) do |f|
															= f.text_field "email", :class => "input-small", :placeholder => "Email", :type => "text"
															= f.button "Add", :class => "btn btn-primary", :type => "submit"
									- else
										= render :partial => "actions", :locals => {:post => post, :question => question}

									- if admin and params[:filter].nil?
										.actions
											%i{style: 'color:#666'}
												Moderations -
												- count = post.moderations.select{|m|m.type_id==1}.count
												- if count > 0
													Correct: #{count}
												- count = post.moderations.select{|m|m.type_id==2}.count
												- if count > 0
													Incorrect: #{count}
												- count = post.moderations.select{|m|m.type_id==3}.count
												- if count > 0
													Tell answer: #{count}
												- count = post.moderations.select{|m|m.type_id==5}.count
												- if count > 0
													Ignore: #{count}
												- count = post.moderations.select{|m|m.type_id==6}.count
												- if count > 0
													Not sure: #{count} 

					.pagination-wrapper
						= paginate @posts unless moderator

= render :partial => "/feeds/respond_modal"
= render :partial => "/feeds/question_modal"

#confirm.modal.hide
	.modal-header
		%button.close{:type => "button", "data-dismiss" => "modal", "aria-hidden" => "true"} &times;
		%h3 Confirm
	.modal-body
		Are you sure you want to unlink this post?							
	.modal-footer
		%a.btn{:type => "button", "data-dismiss" => "modal", "aria-hidden" => "true"} Close
		%a#unlink_post.btn.btn-primary Unlink Post

#post_template.conversation.border-color{:style => "display: none;"}
	.post.parent
		%i.icon-share-alt{:style => "display: none;"}
		.content
			= image_tag(@asker.twi_profile_img_url, :class => "rounded")
			%h5= @asker.twi_screen_name
			%p Post content
		.answers.rounded.border{:style => "display: none;"}
	.subsidiaries{:style => "display: none;"}
	.loading{:style => "display: none;"}
		Loading...

#answer_template.answer_container.input{:type => 'text', :style => "display: none;"}
	.shadow-top
	.tweet
		%span#account= "@#{@asker.twi_screen_name}"
		%span#answer= " Answer text"
		%span#url= " URL"
		/ %span#additional{:contenteditable => true}
	.answer_controls
		.tweet_button.btn.btn-primary Tweet!
	.shadow-bottom

#subsidiary_template.post{:style => "display: none;"}
	%time.timeago
	.content
		= image_tag(@asker.twi_profile_img_url, :class => "rounded")							
		%h5= "User Name"
		%p= "Post content"

= hidden_field_tag :feed_id, @asker.id
= hidden_field_tag :feed_name, @asker.twi_screen_name
= hidden_field_tag :conversations, @conversations.to_json
= hidden_field_tag :engagements, @engagements.to_json
= hidden_field_tag :user_name, current_user.twi_screen_name if current_user
= hidden_field_tag :user_img, current_user.twi_profile_img_url if current_user

= hidden_field_tag :correct_responses, CORRECT.to_json
= hidden_field_tag :correct_complements, COMPLEMENT.to_json
= hidden_field_tag :feed_id, @asker.id
= hidden_field_tag :asker_twi_screen_names, @asker_twi_screen_names.to_json
= hidden_field_tag :is_admin, admin